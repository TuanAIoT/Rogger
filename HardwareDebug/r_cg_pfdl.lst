   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MDUC	=	0xf00e8
  26                             	MDAL	=	0xffff0
  27                             	MDAH	=	0xffff2
  28                             	MDBL	=	0xffff6
  29                             	MDBH	=	0xffff4
  30                             	MDCL	=	0xf00e0
  31                             	MDCH	=	0xf00e2
  32                             	.text
  33                             	.Ltext0:
  34                             		.comm	_gFdlResult,1,1
  35                             		.comm	_gFdlReq,8,2
  36                             		.comm	_gFdlDesc,2,1
  37                             		.comm	_gFdlStatus,1,1
  38                             		.section	.text.R_FDL_Create,"ax",@progbits
  39                             		.global	_R_FDL_Create
  41                             	_R_FDL_Create:
  42                             	.LFB0:
  43                             		.file 1 "../src/r_cg_pfdl.c"
   1:../src/r_cg_pfdl.c **** /**************************************************************************************************
   2:../src/r_cg_pfdl.c **** * DISCLAIMER
   3:../src/r_cg_pfdl.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_pfdl.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_pfdl.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_pfdl.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHE
   7:../src/r_cg_pfdl.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_pfdl.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_pfdl.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_pfdl.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_pfdl.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_pfdl.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_pfdl.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_pfdl.c **** * following link:
  15:../src/r_cg_pfdl.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_pfdl.c **** *
  17:../src/r_cg_pfdl.c **** * Copyright (C) 2011, 2023 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_pfdl.c **** ***************************************************************************************************
  19:../src/r_cg_pfdl.c **** 
  20:../src/r_cg_pfdl.c **** /**************************************************************************************************
  21:../src/r_cg_pfdl.c **** * File Name    : r_cg_pfdl.c
  22:../src/r_cg_pfdl.c **** * Version      : CodeGenerator for RL78/G13 V2.05.07.02 [17 Nov 2023]
  23:../src/r_cg_pfdl.c **** * Device(s)    : R5F100LF
  24:../src/r_cg_pfdl.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_pfdl.c **** * Description  : This file implements device driver for PFDL module.
  26:../src/r_cg_pfdl.c **** * Creation Date: 15/06/2024
  27:../src/r_cg_pfdl.c **** ***************************************************************************************************
  28:../src/r_cg_pfdl.c **** 
  29:../src/r_cg_pfdl.c **** /**************************************************************************************************
  30:../src/r_cg_pfdl.c **** Includes
  31:../src/r_cg_pfdl.c **** ***************************************************************************************************
  32:../src/r_cg_pfdl.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_pfdl.c **** #include "r_cg_cgc.h"
  34:../src/r_cg_pfdl.c **** #include "r_cg_pfdl.h"
  35:../src/r_cg_pfdl.c **** /* Start user code for include. Do not edit comment generated here */
  36:../src/r_cg_pfdl.c **** /* End user code. Do not edit comment generated here */
  37:../src/r_cg_pfdl.c **** #include "r_cg_userdefine.h"
  38:../src/r_cg_pfdl.c **** 
  39:../src/r_cg_pfdl.c **** /**************************************************************************************************
  40:../src/r_cg_pfdl.c **** Global variables and functions
  41:../src/r_cg_pfdl.c **** ***************************************************************************************************
  42:../src/r_cg_pfdl.c **** pfdl_status_t gFdlResult;    /* Return value */
  43:../src/r_cg_pfdl.c **** pfdl_request_t gFdlReq;      /* Control variable for PFDL */
  44:../src/r_cg_pfdl.c **** pfdl_descriptor_t gFdlDesc;
  45:../src/r_cg_pfdl.c **** uint8_t gFdlStatus;	         /* This indicates status of FDL library that is "close" or "open". (op
  46:../src/r_cg_pfdl.c **** /* Start user code for global. Do not edit comment generated here */
  47:../src/r_cg_pfdl.c **** /* End user code. Do not edit comment generated here */
  48:../src/r_cg_pfdl.c **** 
  49:../src/r_cg_pfdl.c **** /**************************************************************************************************
  50:../src/r_cg_pfdl.c **** * Function Name: R_FDL_Create
  51:../src/r_cg_pfdl.c **** * Description  : This function initializes the flash data library.
  52:../src/r_cg_pfdl.c **** * Arguments    : None
  53:../src/r_cg_pfdl.c **** * Return Value : None
  54:../src/r_cg_pfdl.c **** ***************************************************************************************************
  55:../src/r_cg_pfdl.c **** void R_FDL_Create(void)
  56:../src/r_cg_pfdl.c **** {
  44                             		.loc 1 56 0
  57:../src/r_cg_pfdl.c ****     gFdlDesc.fx_MHz_u08 = _24_HOCO_CLOCK_MHz;   /* Set an integer of the range from 1 to 32 accordi
  45                             		.loc 1 57 0
  46 0000 51 18                   		mov	a, #24
  47 0002 9F 00 00                		mov	!_gFdlDesc, a
  58:../src/r_cg_pfdl.c ****     gFdlDesc.wide_voltage_mode_u08 = _FULL_SPEED_MODE; /* Voltage mode */
  48                             		.loc 1 58 0
  49 0005 F5 00 00                		clrb	!_gFdlDesc+1
  59:../src/r_cg_pfdl.c **** }
  50                             		.loc 1 59 0
  51 0008 D7                      		ret
  52                             	.LFE0:
  54                             		.section	.text.R_FDL_Write,"ax",@progbits
  55                             		.global	_R_FDL_Write
  57                             	_R_FDL_Write:
  58                             	.LFB1:
  60:../src/r_cg_pfdl.c **** 
  61:../src/r_cg_pfdl.c **** /**************************************************************************************************
  62:../src/r_cg_pfdl.c **** * Function Name: R_FDL_Write
  63:../src/r_cg_pfdl.c **** * Description  : This function writes a data to the RL78 data flash memory.
  64:../src/r_cg_pfdl.c **** * Arguments    : index -
  65:../src/r_cg_pfdl.c **** *                    It is destination address of flash memory for writing a data. The address rang
  66:../src/r_cg_pfdl.c **** *                buffer -
  67:../src/r_cg_pfdl.c **** *                    The top address of data to write
  68:../src/r_cg_pfdl.c **** *                bytecount -
  69:../src/r_cg_pfdl.c **** *                    The size of data to write (Unit is byte)
  70:../src/r_cg_pfdl.c **** * Return Value : pfdl_status_t -
  71:../src/r_cg_pfdl.c **** *                    status of write command
  72:../src/r_cg_pfdl.c **** ***************************************************************************************************
  73:../src/r_cg_pfdl.c **** pfdl_status_t R_FDL_Write(pfdl_u16 index, __near pfdl_u08* buffer, pfdl_u16 bytecount)
  74:../src/r_cg_pfdl.c **** {
  59                             		.loc 1 74 0
  60                             		; start of function
  61                             		; outgoing: 2 bytes
  62                             		; uses ES register
  63 0000 20 02                   		subw	sp, #2
  64                             	.LCFI0:
  75:../src/r_cg_pfdl.c ****     if (gFdlStatus == 1)
  65                             		.loc 1 75 0
  66 0002 8F 00 00                		mov	a, !_gFdlStatus
  67 0005 9D F0                   		mov	r8, a
  68 0007 4A F0 01                		cmp	r8, #1
  69 000a 61 E8                   		 skz
  70 000c EC 59 00 00             		 br	!!.L3
  76:../src/r_cg_pfdl.c ****     {
  77:../src/r_cg_pfdl.c ****         gFdlReq.index_u16     = index;
  71                             		.loc 1 77 0
  72 0010 A8 06                   		movw	ax, [sp+6]
  73 0012 BD F0                   		movw	r8, ax
  74 0014 BF 00 00                		movw	!_gFdlReq, ax
  78:../src/r_cg_pfdl.c ****         gFdlReq.data_pu08     = buffer;
  75                             		.loc 1 78 0
  76 0017 A8 08                   		movw	ax, [sp+8]
  77 0019 BD F0                   		movw	r8, ax
  78 001b BF 00 00                		movw	!_gFdlReq+2, ax
  79:../src/r_cg_pfdl.c ****         gFdlReq.bytecount_u16 = bytecount;
  79                             		.loc 1 79 0
  80 001e A8 0A                   		movw	ax, [sp+10]
  81 0020 BD F0                   		movw	r8, ax
  82 0022 BF 00 00                		movw	!_gFdlReq+4, ax
  80:../src/r_cg_pfdl.c ****         gFdlReq.command_enu   = PFDL_CMD_WRITE_BYTES;
  83                             		.loc 1 80 0
  84 0025 51 04                   		mov	a, #4
  85 0027 9F 00 00                		mov	!_gFdlReq+6, a
  81:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_Execute(&gFdlReq);
  86                             		.loc 1 81 0
  87 002a 30 00 00                		movw	ax, #_gFdlReq
  88 002d B8 00                   		movw	[sp], ax
  89 002f FC 00 00 00             		call	!!%code(_PFDL_Execute)
  90 0033 8D F0                   		mov	a, r8
  91 0035 9F 00 00                		mov	!_gFdlResult, a
  82:../src/r_cg_pfdl.c ****         /* Wait for completing command */
  83:../src/r_cg_pfdl.c ****         while (gFdlResult == PFDL_BUSY)
  92                             		.loc 1 83 0
  93 0038 EC 47 00 00             		br	!!.L4
  94                             	.L5:
  84:../src/r_cg_pfdl.c ****         {
  85:../src/r_cg_pfdl.c ****             NOP();
  95                             		.loc 1 85 0
  96                             	 ; 85 "../src/r_cg_pfdl.c" 1
  97 003c 00                      		nop
  98                             	 ; 0 "" 2
  86:../src/r_cg_pfdl.c ****             NOP();
  99                             		.loc 1 86 0
 100                             	 ; 86 "../src/r_cg_pfdl.c" 1
 101 003d 00                      		nop
 102                             	 ; 0 "" 2
  87:../src/r_cg_pfdl.c ****             gFdlResult = PFDL_Handler();     /* The process for confirming end */
 103                             		.loc 1 87 0
 104 003e FC 00 00 00             		call	!!%code(_PFDL_Handler)
 105 0042 8D F0                   		mov	a, r8
 106 0044 9F 00 00                		mov	!_gFdlResult, a
 107                             	.L4:
  83:../src/r_cg_pfdl.c ****         {
 108                             		.loc 1 83 0
 109 0047 8F 00 00                		mov	a, !_gFdlResult
 110 004a 9D F0                   		mov	r8, a
 111 004c 4A F0 FF                		cmp	r8, #-1
 112 004f 61 F8                   		 sknz
 113 0051 EC 3C 00 00             		 br	!!.L5
 114 0055 EC 5E 00 00             		br	!!.L6
 115                             	.L3:
  88:../src/r_cg_pfdl.c ****         }
  89:../src/r_cg_pfdl.c ****     }
  90:../src/r_cg_pfdl.c ****     else
  91:../src/r_cg_pfdl.c ****     {
  92:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_ERR_PROTECTION;
 116                             		.loc 1 92 0
 117 0059 51 10                   		mov	a, #16
 118 005b 9F 00 00                		mov	!_gFdlResult, a
 119                             	.L6:
  93:../src/r_cg_pfdl.c ****     }
  94:../src/r_cg_pfdl.c ****     return gFdlResult;
 120                             		.loc 1 94 0
 121 005e 8F 00 00                		mov	a, !_gFdlResult
 122 0061 9D F0                   		mov	r8, a
  95:../src/r_cg_pfdl.c **** }
 123                             		.loc 1 95 0
 124 0063 10 02                   		addw	sp, #2
 125 0065 D7                      		ret
 126                             	.LFE1:
 128                             		.section	.text.R_FDL_Read,"ax",@progbits
 129                             		.global	_R_FDL_Read
 131                             	_R_FDL_Read:
 132                             	.LFB2:
  96:../src/r_cg_pfdl.c **** 
  97:../src/r_cg_pfdl.c **** /**************************************************************************************************
  98:../src/r_cg_pfdl.c **** * Function Name: R_FDL_Read
  99:../src/r_cg_pfdl.c **** * Description  : This function reads a data flash memory.
 100:../src/r_cg_pfdl.c **** * Arguments    : index -
 101:../src/r_cg_pfdl.c **** *                    It is destination address of flash memory for reading a data. The address rang
 102:../src/r_cg_pfdl.c **** *                buffer -
 103:../src/r_cg_pfdl.c **** *                    The top address of data to read
 104:../src/r_cg_pfdl.c **** *                bytecount -
 105:../src/r_cg_pfdl.c **** *                    The size of data to read (Unit is byte)
 106:../src/r_cg_pfdl.c **** * Return Value : pfdl_status_t -
 107:../src/r_cg_pfdl.c **** *                    status of read command
 108:../src/r_cg_pfdl.c **** ***************************************************************************************************
 109:../src/r_cg_pfdl.c **** pfdl_status_t R_FDL_Read(pfdl_u16 index, __near pfdl_u08* buffer, pfdl_u16 bytecount)
 110:../src/r_cg_pfdl.c **** {
 133                             		.loc 1 110 0
 134                             		; start of function
 135                             		; outgoing: 2 bytes
 136                             		; uses ES register
 137 0000 20 02                   		subw	sp, #2
 138                             	.LCFI1:
 111:../src/r_cg_pfdl.c ****     if (gFdlStatus == 1)
 139                             		.loc 1 111 0
 140 0002 8F 00 00                		mov	a, !_gFdlStatus
 141 0005 9D F0                   		mov	r8, a
 142 0007 4A F0 01                		cmp	r8, #1
 143 000a 61 E8                   		 skz
 144 000c EC 3A 00 00             		 br	!!.L9
 112:../src/r_cg_pfdl.c ****     {
 113:../src/r_cg_pfdl.c ****          gFdlReq.index_u16     = index;
 145                             		.loc 1 113 0
 146 0010 A8 06                   		movw	ax, [sp+6]
 147 0012 BD F0                   		movw	r8, ax
 148 0014 BF 00 00                		movw	!_gFdlReq, ax
 114:../src/r_cg_pfdl.c ****          gFdlReq.data_pu08     = buffer;
 149                             		.loc 1 114 0
 150 0017 A8 08                   		movw	ax, [sp+8]
 151 0019 BD F0                   		movw	r8, ax
 152 001b BF 00 00                		movw	!_gFdlReq+2, ax
 115:../src/r_cg_pfdl.c ****          gFdlReq.bytecount_u16 = bytecount;
 153                             		.loc 1 115 0
 154 001e A8 0A                   		movw	ax, [sp+10]
 155 0020 BD F0                   		movw	r8, ax
 156 0022 BF 00 00                		movw	!_gFdlReq+4, ax
 116:../src/r_cg_pfdl.c ****          gFdlReq.command_enu   = PFDL_CMD_READ_BYTES;
 157                             		.loc 1 116 0
 158 0025 F5 00 00                		clrb	!_gFdlReq+6
 117:../src/r_cg_pfdl.c ****          gFdlResult = PFDL_Execute(&gFdlReq);
 159                             		.loc 1 117 0
 160 0028 30 00 00                		movw	ax, #_gFdlReq
 161 002b B8 00                   		movw	[sp], ax
 162 002d FC 00 00 00             		call	!!%code(_PFDL_Execute)
 163 0031 8D F0                   		mov	a, r8
 164 0033 9F 00 00                		mov	!_gFdlResult, a
 165 0036 EC 3F 00 00             		br	!!.L10
 166                             	.L9:
 118:../src/r_cg_pfdl.c ****      }
 119:../src/r_cg_pfdl.c ****      else 
 120:../src/r_cg_pfdl.c ****      {
 121:../src/r_cg_pfdl.c ****          gFdlResult = PFDL_ERR_PROTECTION;
 167                             		.loc 1 121 0
 168 003a 51 10                   		mov	a, #16
 169 003c 9F 00 00                		mov	!_gFdlResult, a
 170                             	.L10:
 122:../src/r_cg_pfdl.c ****      }
 123:../src/r_cg_pfdl.c ****      return gFdlResult;
 171                             		.loc 1 123 0
 172 003f 8F 00 00                		mov	a, !_gFdlResult
 173 0042 9D F0                   		mov	r8, a
 124:../src/r_cg_pfdl.c **** }
 174                             		.loc 1 124 0
 175 0044 10 02                   		addw	sp, #2
 176 0046 D7                      		ret
 177                             	.LFE2:
 179                             		.section	.text.R_FDL_Erase,"ax",@progbits
 180                             		.global	_R_FDL_Erase
 182                             	_R_FDL_Erase:
 183                             	.LFB3:
 125:../src/r_cg_pfdl.c **** 
 126:../src/r_cg_pfdl.c **** /**************************************************************************************************
 127:../src/r_cg_pfdl.c **** * Function Name: R_FDL_Erase
 128:../src/r_cg_pfdl.c **** * Description  : This function erases a block of data flash.
 129:../src/r_cg_pfdl.c **** * Arguments    : blockno -
 130:../src/r_cg_pfdl.c **** *                    The block number to erase data flash. The range of block number is from 0 to 3
 131:../src/r_cg_pfdl.c **** * Return Value : pfdl_status_t -
 132:../src/r_cg_pfdl.c **** *                    status of erase command
 133:../src/r_cg_pfdl.c **** ***************************************************************************************************
 134:../src/r_cg_pfdl.c **** pfdl_status_t R_FDL_Erase(pfdl_u16 blockno)
 135:../src/r_cg_pfdl.c **** {
 184                             		.loc 1 135 0
 185                             		; start of function
 186                             		; outgoing: 2 bytes
 187                             		; uses ES register
 188 0000 20 02                   		subw	sp, #2
 189                             	.LCFI2:
 136:../src/r_cg_pfdl.c ****     if (gFdlStatus == 1)
 190                             		.loc 1 136 0
 191 0002 8F 00 00                		mov	a, !_gFdlStatus
 192 0005 9D F0                   		mov	r8, a
 193 0007 4A F0 01                		cmp	r8, #1
 194 000a 61 E8                   		 skz
 195 000c EC 4B 00 00             		 br	!!.L13
 137:../src/r_cg_pfdl.c ****     {
 138:../src/r_cg_pfdl.c ****         gFdlReq.index_u16     = blockno;
 196                             		.loc 1 138 0
 197 0010 A8 06                   		movw	ax, [sp+6]
 198 0012 BD F0                   		movw	r8, ax
 199 0014 BF 00 00                		movw	!_gFdlReq, ax
 139:../src/r_cg_pfdl.c ****         gFdlReq.command_enu   = PFDL_CMD_ERASE_BLOCK;
 200                             		.loc 1 139 0
 201 0017 51 03                   		mov	a, #3
 202 0019 9F 00 00                		mov	!_gFdlReq+6, a
 140:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_Execute(&gFdlReq);
 203                             		.loc 1 140 0
 204 001c 30 00 00                		movw	ax, #_gFdlReq
 205 001f B8 00                   		movw	[sp], ax
 206 0021 FC 00 00 00             		call	!!%code(_PFDL_Execute)
 207 0025 8D F0                   		mov	a, r8
 208 0027 9F 00 00                		mov	!_gFdlResult, a
 141:../src/r_cg_pfdl.c ****         /* Wait for completing command  */
 142:../src/r_cg_pfdl.c ****         while(gFdlResult == PFDL_BUSY)
 209                             		.loc 1 142 0
 210 002a EC 39 00 00             		br	!!.L14
 211                             	.L15:
 143:../src/r_cg_pfdl.c ****         {
 144:../src/r_cg_pfdl.c ****             NOP(); 
 212                             		.loc 1 144 0
 213                             	 ; 144 "../src/r_cg_pfdl.c" 1
 214 002e 00                      		nop
 215                             	 ; 0 "" 2
 145:../src/r_cg_pfdl.c ****             NOP();
 216                             		.loc 1 145 0
 217                             	 ; 145 "../src/r_cg_pfdl.c" 1
 218 002f 00                      		nop
 219                             	 ; 0 "" 2
 146:../src/r_cg_pfdl.c ****             gFdlResult = PFDL_Handler();     /* The process for confirming end */
 220                             		.loc 1 146 0
 221 0030 FC 00 00 00             		call	!!%code(_PFDL_Handler)
 222 0034 8D F0                   		mov	a, r8
 223 0036 9F 00 00                		mov	!_gFdlResult, a
 224                             	.L14:
 142:../src/r_cg_pfdl.c ****         {
 225                             		.loc 1 142 0
 226 0039 8F 00 00                		mov	a, !_gFdlResult
 227 003c 9D F0                   		mov	r8, a
 228 003e 4A F0 FF                		cmp	r8, #-1
 229 0041 61 F8                   		 sknz
 230 0043 EC 2E 00 00             		 br	!!.L15
 231 0047 EC 50 00 00             		br	!!.L16
 232                             	.L13:
 147:../src/r_cg_pfdl.c ****         }
 148:../src/r_cg_pfdl.c ****     }
 149:../src/r_cg_pfdl.c ****     else 
 150:../src/r_cg_pfdl.c ****     {
 151:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_ERR_PROTECTION;
 233                             		.loc 1 151 0
 234 004b 51 10                   		mov	a, #16
 235 004d 9F 00 00                		mov	!_gFdlResult, a
 236                             	.L16:
 152:../src/r_cg_pfdl.c ****     }
 153:../src/r_cg_pfdl.c ****     return gFdlResult;
 237                             		.loc 1 153 0
 238 0050 8F 00 00                		mov	a, !_gFdlResult
 239 0053 9D F0                   		mov	r8, a
 154:../src/r_cg_pfdl.c **** }
 240                             		.loc 1 154 0
 241 0055 10 02                   		addw	sp, #2
 242 0057 D7                      		ret
 243                             	.LFE3:
 245                             		.section	.text.R_FDL_Open,"ax",@progbits
 246                             		.global	_R_FDL_Open
 248                             	_R_FDL_Open:
 249                             	.LFB4:
 155:../src/r_cg_pfdl.c **** 
 156:../src/r_cg_pfdl.c **** /**************************************************************************************************
 157:../src/r_cg_pfdl.c **** * Function Name: R_FDL_Open
 158:../src/r_cg_pfdl.c **** * Description  : This function opens the RL78 data flash library.
 159:../src/r_cg_pfdl.c **** * Arguments    : None
 160:../src/r_cg_pfdl.c **** * Return Value : None
 161:../src/r_cg_pfdl.c **** ***************************************************************************************************
 162:../src/r_cg_pfdl.c **** void R_FDL_Open(void)
 163:../src/r_cg_pfdl.c **** {
 250                             		.loc 1 163 0
 251                             		; start of function
 252                             		; outgoing: 2 bytes
 253                             		; uses ES register
 254 0000 20 02                   		subw	sp, #2
 255                             	.LCFI3:
 164:../src/r_cg_pfdl.c ****     gFdlDesc.fx_MHz_u08 = _24_HOCO_CLOCK_MHz;   /* Set an integer of the range from 1 to 32 accordi
 256                             		.loc 1 164 0
 257 0002 51 18                   		mov	a, #24
 258 0004 9F 00 00                		mov	!_gFdlDesc, a
 165:../src/r_cg_pfdl.c ****     gFdlDesc.wide_voltage_mode_u08 = _FULL_SPEED_MODE; /* Voltage mode */
 259                             		.loc 1 165 0
 260 0007 F5 00 00                		clrb	!_gFdlDesc+1
 166:../src/r_cg_pfdl.c ****     PFDL_Open(&gFdlDesc);
 261                             		.loc 1 166 0
 262 000a 30 00 00                		movw	ax, #_gFdlDesc
 263 000d B8 00                   		movw	[sp], ax
 264 000f FC 00 00 00             		call	!!%code(_PFDL_Open)
 167:../src/r_cg_pfdl.c ****     gFdlStatus = 1;
 265                             		.loc 1 167 0
 266 0013 E5 00 00                		oneb	!_gFdlStatus
 168:../src/r_cg_pfdl.c **** }
 267                             		.loc 1 168 0
 268 0016 10 02                   		addw	sp, #2
 269 0018 D7                      		ret
 270                             	.LFE4:
 272                             		.section	.text.R_FDL_Close,"ax",@progbits
 273                             		.global	_R_FDL_Close
 275                             	_R_FDL_Close:
 276                             	.LFB5:
 169:../src/r_cg_pfdl.c **** 
 170:../src/r_cg_pfdl.c **** /**************************************************************************************************
 171:../src/r_cg_pfdl.c **** * Function Name: R_FDL_Close
 172:../src/r_cg_pfdl.c **** * Description  : This function closes the RL78 data flash library.
 173:../src/r_cg_pfdl.c **** * Arguments    : None
 174:../src/r_cg_pfdl.c **** * Return Value : None
 175:../src/r_cg_pfdl.c **** ***************************************************************************************************
 176:../src/r_cg_pfdl.c **** void R_FDL_Close(void)
 177:../src/r_cg_pfdl.c **** {
 277                             		.loc 1 177 0
 178:../src/r_cg_pfdl.c ****     PFDL_Close();
 278                             		.loc 1 178 0
 279 0000 FC 00 00 00             		call	!!%code(_PFDL_Close)
 179:../src/r_cg_pfdl.c ****     gFdlStatus = 0;
 280                             		.loc 1 179 0
 281 0004 F5 00 00                		clrb	!_gFdlStatus
 180:../src/r_cg_pfdl.c **** }
 282                             		.loc 1 180 0
 283 0007 D7                      		ret
 284                             	.LFE5:
 286                             		.section	.text.R_FDL_BlankCheck,"ax",@progbits
 287                             		.global	_R_FDL_BlankCheck
 289                             	_R_FDL_BlankCheck:
 290                             	.LFB6:
 181:../src/r_cg_pfdl.c **** 
 182:../src/r_cg_pfdl.c **** /**************************************************************************************************
 183:../src/r_cg_pfdl.c **** * Function Name: R_FDL_BlankCheck
 184:../src/r_cg_pfdl.c **** * Description  : This function blank check a data to the RL78 data flash memory.
 185:../src/r_cg_pfdl.c **** * Arguments    : index -
 186:../src/r_cg_pfdl.c **** *                    It is destination address of flash memory for blank check. The address range i
 187:../src/r_cg_pfdl.c **** *                bytecount -
 188:../src/r_cg_pfdl.c **** *                    The size of data to blank check (Unit is byte)
 189:../src/r_cg_pfdl.c **** * Return Value : pfdl_status_t -
 190:../src/r_cg_pfdl.c **** *                    status of blank check command
 191:../src/r_cg_pfdl.c **** ***************************************************************************************************
 192:../src/r_cg_pfdl.c **** pfdl_status_t R_FDL_BlankCheck(pfdl_u16 index, pfdl_u16 bytecount)
 193:../src/r_cg_pfdl.c **** {
 291                             		.loc 1 193 0
 292                             		; start of function
 293                             		; outgoing: 2 bytes
 294                             		; uses ES register
 295 0000 20 02                   		subw	sp, #2
 296                             	.LCFI4:
 194:../src/r_cg_pfdl.c ****     if (gFdlStatus == 1)
 297                             		.loc 1 194 0
 298 0002 8F 00 00                		mov	a, !_gFdlStatus
 299 0005 9D F0                   		mov	r8, a
 300 0007 4A F0 01                		cmp	r8, #1
 301 000a 61 E8                   		 skz
 302 000c EC 52 00 00             		 br	!!.L21
 195:../src/r_cg_pfdl.c ****     {
 196:../src/r_cg_pfdl.c ****         gFdlReq.index_u16 = index;
 303                             		.loc 1 196 0
 304 0010 A8 06                   		movw	ax, [sp+6]
 305 0012 BD F0                   		movw	r8, ax
 306 0014 BF 00 00                		movw	!_gFdlReq, ax
 197:../src/r_cg_pfdl.c ****         gFdlReq.bytecount_u16 = bytecount;
 307                             		.loc 1 197 0
 308 0017 A8 08                   		movw	ax, [sp+8]
 309 0019 BD F0                   		movw	r8, ax
 310 001b BF 00 00                		movw	!_gFdlReq+4, ax
 198:../src/r_cg_pfdl.c ****         gFdlReq.command_enu = PFDL_CMD_BLANKCHECK_BYTES;
 311                             		.loc 1 198 0
 312 001e 51 08                   		mov	a, #8
 313 0020 9F 00 00                		mov	!_gFdlReq+6, a
 199:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_Execute(&gFdlReq);
 314                             		.loc 1 199 0
 315 0023 30 00 00                		movw	ax, #_gFdlReq
 316 0026 B8 00                   		movw	[sp], ax
 317 0028 FC 00 00 00             		call	!!%code(_PFDL_Execute)
 318 002c 8D F0                   		mov	a, r8
 319 002e 9F 00 00                		mov	!_gFdlResult, a
 200:../src/r_cg_pfdl.c ****         /* Wait for completing command */
 201:../src/r_cg_pfdl.c ****         while(gFdlResult == PFDL_BUSY)
 320                             		.loc 1 201 0
 321 0031 EC 40 00 00             		br	!!.L22
 322                             	.L23:
 202:../src/r_cg_pfdl.c ****         {
 203:../src/r_cg_pfdl.c ****             NOP();
 323                             		.loc 1 203 0
 324                             	 ; 203 "../src/r_cg_pfdl.c" 1
 325 0035 00                      		nop
 326                             	 ; 0 "" 2
 204:../src/r_cg_pfdl.c ****             NOP();
 327                             		.loc 1 204 0
 328                             	 ; 204 "../src/r_cg_pfdl.c" 1
 329 0036 00                      		nop
 330                             	 ; 0 "" 2
 205:../src/r_cg_pfdl.c ****             gFdlResult = PFDL_Handler();     /* The process for confirming end */
 331                             		.loc 1 205 0
 332 0037 FC 00 00 00             		call	!!%code(_PFDL_Handler)
 333 003b 8D F0                   		mov	a, r8
 334 003d 9F 00 00                		mov	!_gFdlResult, a
 335                             	.L22:
 201:../src/r_cg_pfdl.c ****         {
 336                             		.loc 1 201 0
 337 0040 8F 00 00                		mov	a, !_gFdlResult
 338 0043 9D F0                   		mov	r8, a
 339 0045 4A F0 FF                		cmp	r8, #-1
 340 0048 61 F8                   		 sknz
 341 004a EC 35 00 00             		 br	!!.L23
 342 004e EC 57 00 00             		br	!!.L24
 343                             	.L21:
 206:../src/r_cg_pfdl.c ****         }
 207:../src/r_cg_pfdl.c ****     }
 208:../src/r_cg_pfdl.c ****     else
 209:../src/r_cg_pfdl.c ****     {
 210:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_ERR_PROTECTION;
 344                             		.loc 1 210 0
 345 0052 51 10                   		mov	a, #16
 346 0054 9F 00 00                		mov	!_gFdlResult, a
 347                             	.L24:
 211:../src/r_cg_pfdl.c ****     }
 212:../src/r_cg_pfdl.c ****     return gFdlResult;
 348                             		.loc 1 212 0
 349 0057 8F 00 00                		mov	a, !_gFdlResult
 350 005a 9D F0                   		mov	r8, a
 213:../src/r_cg_pfdl.c **** }
 351                             		.loc 1 213 0
 352 005c 10 02                   		addw	sp, #2
 353 005e D7                      		ret
 354                             	.LFE6:
 356                             		.section	.text.R_FDL_IVerify,"ax",@progbits
 357                             		.global	_R_FDL_IVerify
 359                             	_R_FDL_IVerify:
 360                             	.LFB7:
 214:../src/r_cg_pfdl.c **** 
 215:../src/r_cg_pfdl.c **** /**************************************************************************************************
 216:../src/r_cg_pfdl.c **** * Function Name: R_FDL_IVerify
 217:../src/r_cg_pfdl.c **** * Description  : This function writes a data to the RL78 data flash memory.
 218:../src/r_cg_pfdl.c **** * Arguments    : index -
 219:../src/r_cg_pfdl.c **** *                    It is destination address of flash memory for iverify a data. The address rang
 220:../src/r_cg_pfdl.c **** *                bytecount -
 221:../src/r_cg_pfdl.c **** *                    The size of data to iverify (Unit is byte)
 222:../src/r_cg_pfdl.c **** * Return Value : pfdl_status_t -
 223:../src/r_cg_pfdl.c **** *                    status of iverify command
 224:../src/r_cg_pfdl.c **** ***************************************************************************************************
 225:../src/r_cg_pfdl.c **** pfdl_status_t R_FDL_IVerify(pfdl_u16 index, pfdl_u16 bytecount)
 226:../src/r_cg_pfdl.c **** {
 361                             		.loc 1 226 0
 362                             		; start of function
 363                             		; outgoing: 2 bytes
 364                             		; uses ES register
 365 0000 20 02                   		subw	sp, #2
 366                             	.LCFI5:
 227:../src/r_cg_pfdl.c ****     if (gFdlStatus == 1)
 367                             		.loc 1 227 0
 368 0002 8F 00 00                		mov	a, !_gFdlStatus
 369 0005 9D F0                   		mov	r8, a
 370 0007 4A F0 01                		cmp	r8, #1
 371 000a 61 E8                   		 skz
 372 000c EC 52 00 00             		 br	!!.L27
 228:../src/r_cg_pfdl.c ****     {
 229:../src/r_cg_pfdl.c ****         gFdlReq.index_u16 = index;
 373                             		.loc 1 229 0
 374 0010 A8 06                   		movw	ax, [sp+6]
 375 0012 BD F0                   		movw	r8, ax
 376 0014 BF 00 00                		movw	!_gFdlReq, ax
 230:../src/r_cg_pfdl.c ****         gFdlReq.bytecount_u16 = bytecount;
 377                             		.loc 1 230 0
 378 0017 A8 08                   		movw	ax, [sp+8]
 379 0019 BD F0                   		movw	r8, ax
 380 001b BF 00 00                		movw	!_gFdlReq+4, ax
 231:../src/r_cg_pfdl.c ****         gFdlReq.command_enu = PFDL_CMD_IVERIFY_BYTES;
 381                             		.loc 1 231 0
 382 001e 51 06                   		mov	a, #6
 383 0020 9F 00 00                		mov	!_gFdlReq+6, a
 232:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_Execute(&gFdlReq);
 384                             		.loc 1 232 0
 385 0023 30 00 00                		movw	ax, #_gFdlReq
 386 0026 B8 00                   		movw	[sp], ax
 387 0028 FC 00 00 00             		call	!!%code(_PFDL_Execute)
 388 002c 8D F0                   		mov	a, r8
 389 002e 9F 00 00                		mov	!_gFdlResult, a
 233:../src/r_cg_pfdl.c ****         /* Wait for completing command */
 234:../src/r_cg_pfdl.c ****         while(gFdlResult == PFDL_BUSY)
 390                             		.loc 1 234 0
 391 0031 EC 40 00 00             		br	!!.L28
 392                             	.L29:
 235:../src/r_cg_pfdl.c ****         {
 236:../src/r_cg_pfdl.c ****             NOP();
 393                             		.loc 1 236 0
 394                             	 ; 236 "../src/r_cg_pfdl.c" 1
 395 0035 00                      		nop
 396                             	 ; 0 "" 2
 237:../src/r_cg_pfdl.c ****             NOP();
 397                             		.loc 1 237 0
 398                             	 ; 237 "../src/r_cg_pfdl.c" 1
 399 0036 00                      		nop
 400                             	 ; 0 "" 2
 238:../src/r_cg_pfdl.c ****             gFdlResult = PFDL_Handler();     /* The process for confirming end */
 401                             		.loc 1 238 0
 402 0037 FC 00 00 00             		call	!!%code(_PFDL_Handler)
 403 003b 8D F0                   		mov	a, r8
 404 003d 9F 00 00                		mov	!_gFdlResult, a
 405                             	.L28:
 234:../src/r_cg_pfdl.c ****         {
 406                             		.loc 1 234 0
 407 0040 8F 00 00                		mov	a, !_gFdlResult
 408 0043 9D F0                   		mov	r8, a
 409 0045 4A F0 FF                		cmp	r8, #-1
 410 0048 61 F8                   		 sknz
 411 004a EC 35 00 00             		 br	!!.L29
 412 004e EC 57 00 00             		br	!!.L30
 413                             	.L27:
 239:../src/r_cg_pfdl.c ****         }
 240:../src/r_cg_pfdl.c ****     }
 241:../src/r_cg_pfdl.c ****     else
 242:../src/r_cg_pfdl.c ****     {
 243:../src/r_cg_pfdl.c ****         gFdlResult = PFDL_ERR_PROTECTION;
 414                             		.loc 1 243 0
 415 0052 51 10                   		mov	a, #16
 416 0054 9F 00 00                		mov	!_gFdlResult, a
 417                             	.L30:
 244:../src/r_cg_pfdl.c ****     }
 245:../src/r_cg_pfdl.c ****     return gFdlResult;
 418                             		.loc 1 245 0
 419 0057 8F 00 00                		mov	a, !_gFdlResult
 420 005a 9D F0                   		mov	r8, a
 246:../src/r_cg_pfdl.c **** }
 421                             		.loc 1 246 0
 422 005c 10 02                   		addw	sp, #2
 423 005e D7                      		ret
 424                             	.LFE7:
 532                             	.Letext0:
 533                             		.file 2 "../src/r_cg_macrodriver.h"
 534                             		.file 3 "E:\\AIoT\\Code\\Rogger\\DGC_A230_6_Rev_1_0_Software\\pfdl/pfdl_types.h"
