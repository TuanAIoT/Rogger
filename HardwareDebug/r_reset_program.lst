   1                             	# 1 "../src/r_reset_program.asm"
   1                             	
   0                             	
   0                             	
   0                             	
   2                             	///************************************************************************************************
   3                             	//* DISCLAIMER
   4                             	//* This software is supplied by Renesas Electronics Corporation and is only intended for use with 
   5                             	//* No other uses are authorized. This software is owned by Renesas Electronics Corporation and is 
   6                             	//* applicable laws, including copyright laws. 
   7                             	//* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHET
   8                             	//* OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICU
   9                             	//* NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED
  10                             	//* LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABL
  11                             	//* INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE,
  12                             	//* ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  13                             	//* Renesas reserves the right, without notice, to make changes to this software and to discontinue
  14                             	//* of this software. By using this software, you agree to the additional terms and conditions foun
  15                             	//* following link:
  16                             	//* http://www.renesas.com/disclaimer
  17                             	//*
  18                             	//* Copyright (C) 2011, 2021 Renesas Electronics Corporation. All rights reserved.
  19                             	//*************************************************************************************************
  20                             	
  21                             	///*
  22                             	//*************************************************************************************************
  23                             	//* File Name    : r_reset_program.asm
  24                             	//* Version      : CodeGenerator for RL78/G13 V2.05.06.02 [08 Nov 2021]
  25                             	//* Device(s)    : R5F100LF
  26                             	//* Tool-Chain   : gccrl78
  27                             	//* Description  : This is start up file for RL78.
  28                             	//* Creation Date: 7/28/2024
  29                             	//*************************************************************************************************
  30                             	//*/
  31                             	
  32                             		/*reset_program.asm*/
  33                             	
  34                             		.list
  35                             	
  36                             		.global _PowerON_Reset  /*! global Start routine */
  37 0000 00 00                   		.short _PowerON_Reset
  38                             	
  39                             	#ifdef CPPAPP    
  40                             	___dso_handle:
  41                             	    .global ___dso_handle
  42                             	#endif
  43                             		
  44                             		.global __rl78_fini
  45                             			__rl78_fini:
  46 0002 EF FE                   			br $__rl78_fini
  47                             	
  48                             		.extern _HardwareSetup /*! external Sub-routine to initialise Hardware*/
  49                             		.extern _data
  50                             		.extern _mdata
  51                             		.extern _ebss
  52                             		.extern _bss
  53                             		
  54                             		.extern _edata
  55                             		.extern _main 
  56                             		.extern _stack
  57                             		.extern _exit
  58                             	
  59                             		/*  ;; HL = start of list
  60                             	        ;; DE = end of list
  61                             	        ;; BC = step direction (+2 or -2)
  62                             		*/
  63                             		
  64                             		.text
  65                             	
  66                             	/* call to _PowerON_Reset */
  67                             	_PowerON_Reset:
  68                             	/* initialise user stack pointer */
  69 0004 CB F8 00 00             		movw sp,#_stack /* Set stack pointer */
  70                             	
  71                             	
  72                             	/* load data section from ROM to RAM */	
  73                             	;; block move to initialize .data
  74                             	
  75                             	        ;; we're copying from 00:[_romdatastart] to 0F:[_datastart]
  76                             	        ;; and our data is not in the mirrored area.
  77 0008 41 00                   	    mov     es, #0
  78                             	#ifndef __RL78_G10__
  79 000a 61 CF                   	    sel     rb0         /*  ;;bank 0 */
  80                             	#endif
  81                             	
  82 000c 34 00 00                	    movw    de, #_mdata	/* src ROM address of data section in de */
  83 000f 36 00 00                	    movw    hl, #_data 	/* dest start RAM address of data section in hl */
  84                             	
  85                             	#ifndef __RL78_G10__		
  86 0012 61 DF                   	    sel     rb1              /* bank 1 */
  87 0014 36 00 00                	    movw    hl, #_data 	/* dest start RAM address of data section in hl */
  88                             	#endif
  89 0017 30 00 00                	    movw    ax, #_edata   /*    ;; size of romdata section in ax */
  90 001a 27                      	    subw    ax,hl  		/* store data size */
  91 001b 31 1E                   	    shrw	ax,1
  92                             	1:
  93 001d 44 00 00                	    cmpw    ax, #0		   /* check if end of data */
  94 0020 DD 0E                   	    bz      $1f
  95 0022 B1                      	    decw    ax
  96                             	#ifdef __RL78_G10__
  97                             	    movw    bc, ax          /* save ax value in bc */
  98                             	#endif
  99                             	
 100                             	#ifndef __RL78_G10__
 101 0023 61 CF                   	    sel     rb0             /* bank 0 */
 102                             	#endif
 103 0025 11 A9                   	    movw    ax, es:[de]
 104 0027 BB                      	    movw    [hl], ax
 105 0028 A5                      	    incw    de
 106 0029 A5                      	    incw	de
 107 002a A7                      	    incw    hl
 108 002b A7                      		incw	hl
 109                             	#ifndef __RL78_G10__
 110 002c 61 DF                   	    sel     rb1         /* bank 1  -  compare and decrement*/
 111                             	#endif
 112                             	
 113                             	#ifdef __RL78_G10__
 114                             	    movw     ax, bc     /* restore ax value */
 115                             	#endif
 116 002e EF ED                   	    br      $1b
 117                             	1:
 118                             	
 119                             		
 120                             	/* bss initialisation : zero out bss */
 121                             	#ifndef __RL78_G10__
 122 0030 61 CF                   	    sel     rb0         /* bank 0 */
 123 0032 30 00 00                	    movw    ax, #0		/* load AX reg with zero */
 124 0035 61 DF                   	    sel     rb1         /* bank 1 */
 125 0037 30 00 00                	    movw    ax, #_ebss  /* store the end address (size of) bss section in ax */
 126 003a 36 00 00                		movw    hl, #_bss  	/* store the start address of bss in hl */
 127 003d 27                      	    subw    ax,hl ;; store data size
 128 003e 31 1E                   	    shrw    ax,1
 129                             	#endif
 130                             	
 131                             	#ifdef __RL78_G10__
 132                             	    movw    hl, #_bss   /* store the start address of bss in hl */
 133                             	    movw    ax, #_ebss  /* store the end address (size of) bss section in ax */
 134                             	    subw    ax,hl ;; store data size
 135                             	    shrw    ax,1
 136                             	#endif
 137                             	
 138                             	1:
 139 0040 44 00 00                	    cmpw    ax, #0
 140 0043 DD 0A                   	    bz      $1f
 141 0045 B1                      	    decw    ax
 142                             	#ifdef __RL78_G10__
 143                             	    movw     bc, ax        /* save ax value in bc */
 144                             	    movw    ax, #0
 145                             	#endif
 146                             	#ifndef __RL78_G10__
 147 0046 61 CF                   	    sel     rb0         /* bank 0 */
 148                             	#endif
 149 0048 BB                      	    movw    [hl], ax
 150 0049 A7                      	    incw    hl
 151 004a A7                      	    incw	hl
 152                             	#ifdef __RL78_G10__
 153                             	    movw    ax, bc        /* restore ax value */
 154                             	#endif
 155                             	#ifndef __RL78_G10__
 156 004b 61 DF                   	    sel     rb1
 157                             	#endif
 158 004d EF F1                   	    br      $1b
 159                             	1:
 160                             	#ifndef __RL78_G10__
 161 004f 61 CF                   	    sel     rb0             /* bank 0 */
 162                             	#endif
 163                             	
 164                             	/* call the hardware initialiser */
 165 0051 FC 00 00 00             		call	!!_HardwareSetup
 166 0055 00                      		nop
 167                             	
 168                             	
 169                             	/* start user program */
 170                             	
 171 0056 30 00 00                	    movw    ax, #0
 172 0059 C1                      	    push    ax      /* envp */
 173 005a C1                      	    push    ax      /* argv */
 174 005b C1                      	    push    ax      /* argc */
 175 005c FC 00 00 00             	    call	!!_main
 176                             	
 177                             	
 178                             	/* call to exit*/
 179                             	_exit:
 180 0060 EF FE                   	     br	$_exit
 181                             	
 182                             		.end
