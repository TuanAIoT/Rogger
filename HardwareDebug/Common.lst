   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MDUC	=	0xf00e8
  26                             	MDAL	=	0xffff0
  27                             	MDAH	=	0xffff2
  28                             	MDBL	=	0xffff6
  29                             	MDBH	=	0xffff4
  30                             	MDCL	=	0xf00e0
  31                             	MDCH	=	0xf00e2
  32                             	.text
  33                             	.Ltext0:
  34                             		.section	.text.delay_ms,"ax",@progbits
  35                             		.global	_delay_ms
  37                             	_delay_ms:
  38                             	.LFB0:
  39                             		.file 1 "../Common/Common.c"
   1:../Common/Common.c **** /*
   2:../Common/Common.c ****  * Common.c
   3:../Common/Common.c ****  *
   4:../Common/Common.c ****  *  Created on: Nov 21, 2023
   5:../Common/Common.c ****  *      Author: Mr. Han
   6:../Common/Common.c ****  */
   7:../Common/Common.c **** 
   8:../Common/Common.c **** #include "r_cg_macrodriver.h"
   9:../Common/Common.c **** #include "common.h"
  10:../Common/Common.c **** 
  11:../Common/Common.c **** void delay_ms(uint16_t m_seccond)
  12:../Common/Common.c **** {
  40                             		.loc 1 12 0
  41                             		; start of function
  42                             		; locals: 2 bytes
  43                             		; uses ES register
  44 0000 20 02                   		subw	sp, #2
  45                             	.LCFI0:
  13:../Common/Common.c **** 	uint16_t tick_count;
  14:../Common/Common.c **** 	while(m_seccond>0)
  46                             		.loc 1 14 0
  47 0002 EC 25 00 00             		br	!!.L2
  48                             	.L5:
  15:../Common/Common.c **** 		{
  16:../Common/Common.c **** 		for(tick_count = 0; tick_count < 2904; tick_count ++) NOP();
  49                             		.loc 1 16 0
  50 0006 F6                      		clrw	ax
  51 0007 B8 00                   		movw	[sp], ax
  52 0009 EC 15 00 00             		br	!!.L3
  53                             	.L4:
  54                             		.loc 1 16 0 is_stmt 0 discriminator 3
  55                             	 ; 16 "../Common/Common.c" 1
  56 000d 00                      		nop
  57                             	 ; 0 "" 2
  58 000e A8 00                   		movw	ax, [sp]
  59 0010 BD F0                   		movw	r8, ax
  60 0012 A1                      		incw	ax
  61 0013 B8 00                   		movw	[sp], ax
  62                             	.L3:
  63                             		.loc 1 16 0 discriminator 1
  64 0015 A8 00                   		movw	ax, [sp]
  65 0017 44 57 0B                		cmpw	ax, #2903
  66 001a 61 E3                   		 skh
  67 001c EC 0D 00 00             		 br	!!.L4
  17:../Common/Common.c **** 		m_seccond -= 1;
  68                             		.loc 1 17 0 is_stmt 1
  69 0020 A8 06                   		movw	ax, [sp+6]
  70 0022 B1                      		decw	ax
  71 0023 B8 06                   		movw	[sp+6], ax
  72                             	.L2:
  14:../Common/Common.c **** 		{
  73                             		.loc 1 14 0
  74 0025 A8 06                   		movw	ax, [sp+6]
  75 0027 44 00 00                		cmpw	ax, #0
  76 002a 61 E8                   		 skz
  77 002c EC 06 00 00             		 br	!!.L5
  18:../Common/Common.c **** 		}
  19:../Common/Common.c **** }
  78                             		.loc 1 19 0
  79 0030 10 02                   		addw	sp, #2
  80 0032 D7                      		ret
  81                             	.LFE0:
  83                             		.section	.text.delay_us,"ax",@progbits
  84                             		.global	_delay_us
  86                             	_delay_us:
  87                             	.LFB1:
  20:../Common/Common.c **** 
  21:../Common/Common.c **** void delay_us(uint16_t u_seccond)
  22:../Common/Common.c **** {
  88                             		.loc 1 22 0
  23:../Common/Common.c **** 	while(u_seccond>0)
  89                             		.loc 1 23 0
  90 0000 EC 20 00 00             		br	!!.L7
  91                             	.L8:
  24:../Common/Common.c **** 		{
  25:../Common/Common.c **** 		NOP(); NOP(); NOP(); NOP();
  92                             		.loc 1 25 0
  93                             	 ; 25 "../Common/Common.c" 1
  94 0004 00                      		nop
  95                             	 ; 0 "" 2
  96                             	 ; 25 "../Common/Common.c" 1
  97 0005 00                      		nop
  98                             	 ; 0 "" 2
  99                             	 ; 25 "../Common/Common.c" 1
 100 0006 00                      		nop
 101                             	 ; 0 "" 2
 102                             	 ; 25 "../Common/Common.c" 1
 103 0007 00                      		nop
 104                             	 ; 0 "" 2
  26:../Common/Common.c **** 		NOP(); NOP(); NOP(); NOP();
 105                             		.loc 1 26 0
 106                             	 ; 26 "../Common/Common.c" 1
 107 0008 00                      		nop
 108                             	 ; 0 "" 2
 109                             	 ; 26 "../Common/Common.c" 1
 110 0009 00                      		nop
 111                             	 ; 0 "" 2
 112                             	 ; 26 "../Common/Common.c" 1
 113 000a 00                      		nop
 114                             	 ; 0 "" 2
 115                             	 ; 26 "../Common/Common.c" 1
 116 000b 00                      		nop
 117                             	 ; 0 "" 2
  27:../Common/Common.c **** 		NOP(); NOP(); NOP(); NOP();
 118                             		.loc 1 27 0
 119                             	 ; 27 "../Common/Common.c" 1
 120 000c 00                      		nop
 121                             	 ; 0 "" 2
 122                             	 ; 27 "../Common/Common.c" 1
 123 000d 00                      		nop
 124                             	 ; 0 "" 2
 125                             	 ; 27 "../Common/Common.c" 1
 126 000e 00                      		nop
 127                             	 ; 0 "" 2
 128                             	 ; 27 "../Common/Common.c" 1
 129 000f 00                      		nop
 130                             	 ; 0 "" 2
  28:../Common/Common.c **** 		NOP(); NOP(); NOP(); NOP();
 131                             		.loc 1 28 0
 132                             	 ; 28 "../Common/Common.c" 1
 133 0010 00                      		nop
 134                             	 ; 0 "" 2
 135                             	 ; 28 "../Common/Common.c" 1
 136 0011 00                      		nop
 137                             	 ; 0 "" 2
 138                             	 ; 28 "../Common/Common.c" 1
 139 0012 00                      		nop
 140                             	 ; 0 "" 2
 141                             	 ; 28 "../Common/Common.c" 1
 142 0013 00                      		nop
 143                             	 ; 0 "" 2
  29:../Common/Common.c **** 		NOP(); NOP(); NOP(); NOP();
 144                             		.loc 1 29 0
 145                             	 ; 29 "../Common/Common.c" 1
 146 0014 00                      		nop
 147                             	 ; 0 "" 2
 148                             	 ; 29 "../Common/Common.c" 1
 149 0015 00                      		nop
 150                             	 ; 0 "" 2
 151                             	 ; 29 "../Common/Common.c" 1
 152 0016 00                      		nop
 153                             	 ; 0 "" 2
 154                             	 ; 29 "../Common/Common.c" 1
 155 0017 00                      		nop
 156                             	 ; 0 "" 2
  30:../Common/Common.c **** 		NOP(); NOP(); NOP(); //NOP();
 157                             		.loc 1 30 0
 158                             	 ; 30 "../Common/Common.c" 1
 159 0018 00                      		nop
 160                             	 ; 0 "" 2
 161                             	 ; 30 "../Common/Common.c" 1
 162 0019 00                      		nop
 163                             	 ; 0 "" 2
 164                             	 ; 30 "../Common/Common.c" 1
 165 001a 00                      		nop
 166                             	 ; 0 "" 2
  31:../Common/Common.c **** //		NOP(); NOP(); NOP(); NOP();
  32:../Common/Common.c **** //		NOP(); NOP(); NOP(); NOP();
  33:../Common/Common.c **** 		u_seccond -= 1;
 167                             		.loc 1 33 0
 168 001b A8 04                   		movw	ax, [sp+4]
 169 001d B1                      		decw	ax
 170 001e B8 04                   		movw	[sp+4], ax
 171                             	.L7:
  23:../Common/Common.c **** 		{
 172                             		.loc 1 23 0
 173 0020 A8 04                   		movw	ax, [sp+4]
 174 0022 44 00 00                		cmpw	ax, #0
 175 0025 61 E8                   		 skz
 176 0027 EC 04 00 00             		 br	!!.L8
  34:../Common/Common.c **** 		}
  35:../Common/Common.c **** }
 177                             		.loc 1 35 0
 178 002b D7                      		ret
 179                             	.LFE1:
 181                             		.section	.rodata
 182                             	.LC0:
 183 0000 30                      		.byte	48
 184 0001 31                      		.byte	49
 185 0002 32                      		.byte	50
 186 0003 33                      		.byte	51
 187 0004 34                      		.byte	52
 188 0005 35                      		.byte	53
 189 0006 36                      		.byte	54
 190 0007 37                      		.byte	55
 191 0008 38                      		.byte	56
 192 0009 39                      		.byte	57
 193 000a 41                      		.byte	65
 194 000b 42                      		.byte	66
 195 000c 43                      		.byte	67
 196 000d 44                      		.byte	68
 197 000e 45                      		.byte	69
 198 000f 46                      		.byte	70
 199                             		.section	.text.convert_binary_to_ascii,"ax",@progbits
 200                             		.global	_convert_binary_to_ascii
 202                             	_convert_binary_to_ascii:
 203                             	.LFB2:
  36:../Common/Common.c **** 
  37:../Common/Common.c **** void convert_binary_to_ascii(uint8_t binary, uint8_t *buffer_high, uint8_t *buffer_low)
  38:../Common/Common.c **** {
 204                             		.loc 1 38 0
 205                             		; start of function
 206                             		; locals: 16 bytes
 207                             		; outgoing: 6 bytes
 208                             		; uses ES register
 209 0000 20 16                   		subw	sp, #22
 210                             	.LCFI1:
  39:../Common/Common.c ****     uint8_t table_ascii[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 
 211                             		.loc 1 39 0
 212 0002 AE F8                   		movw	ax, sp
 213 0004 BD F2                   		movw	r10, ax
 214 0006 04 06 00                		addw	ax, #6
 215 0009 BD F0                   		movw	r8, ax
 216 000b C9 F4 00 00             		movw	r12, #.LC0
 217 000f C9 F2 10 00             		movw	r10, #16
 218 0013 B8 00                   		movw	[sp], ax
 219 0015 AD F4                   		movw	ax, r12
 220 0017 B8 02                   		movw	[sp+2], ax
 221 0019 AD F2                   		movw	ax, r10
 222 001b B8 04                   		movw	[sp+4], ax
 223 001d FC 00 00 00             		call	!!%code(_memcpy)
  40:../Common/Common.c **** 
  41:../Common/Common.c ****     *buffer_high = table_ascii[GET_HIGH_4BIT(binary)];
 224                             		.loc 1 41 0
 225 0021 88 1A                   		mov	a, [sp+26]
 226 0023 31 4A                   		shr	a, 4
 227 0025 9D F0                   		mov	r8, a
 228 0027 F4 F1                   		clrb	r9
 229 0029 AE F8                   		movw	ax, sp
 230 002b BD F4                   		movw	r12, ax
 231 002d 04 06 00                		addw	ax, #6
 232 0030 BD F2                   		movw	r10, ax
 233 0032 06 F0                   		addw	ax, r8
 234 0034 BD F0                   		movw	r8, ax
 235 0036 BD F4                   		movw	r12, ax
 236 0038 FA F4                   		movw	hl, r12
 237 003a 8B                      		mov	a, [hl]
 238 003b 9D F2                   		mov	r10, a
 239 003d A8 1C                   		movw	ax, [sp+28]
 240 003f BD F0                   		movw	r8, ax
 241 0041 BD F4                   		movw	r12, ax
 242 0043 EA F4                   		movw	de, r12
 243 0045 8D F2                   		mov	a, r10
 244 0047 99                      		mov	[de], a
  42:../Common/Common.c ****     *buffer_low = table_ascii[GET_LOW_4BIT(binary)];
 245                             		.loc 1 42 0
 246 0048 88 1A                   		mov	a, [sp+26]
 247 004a 31 8E                   		shrw	ax, 8
 248 004c BD F0                   		movw	r8, ax
 249 004e 5A F0 0F                		and	r8, #15
 250 0051 F4 F1                   		clrb	r9 ;andhi3 r8,r8,#15
 251 0053 AE F8                   		movw	ax, sp
 252 0055 BD F4                   		movw	r12, ax
 253 0057 04 06 00                		addw	ax, #6
 254 005a BD F2                   		movw	r10, ax
 255 005c 06 F0                   		addw	ax, r8
 256 005e BD F0                   		movw	r8, ax
 257 0060 BD F4                   		movw	r12, ax
 258 0062 FA F4                   		movw	hl, r12
 259 0064 8B                      		mov	a, [hl]
 260 0065 9D F2                   		mov	r10, a
 261 0067 A8 1E                   		movw	ax, [sp+30]
 262 0069 BD F0                   		movw	r8, ax
 263 006b BD F4                   		movw	r12, ax
 264 006d EA F4                   		movw	de, r12
 265 006f 8D F2                   		mov	a, r10
 266 0071 99                      		mov	[de], a
  43:../Common/Common.c **** }
 267                             		.loc 1 43 0
 268 0072 10 16                   		addw	sp, #22
 269 0074 D7                      		ret
 270                             	.LFE2:
 272                             		.section	.text.convert_ascii_to_binary,"ax",@progbits
 273                             		.global	_convert_ascii_to_binary
 275                             	_convert_ascii_to_binary:
 276                             	.LFB3:
  44:../Common/Common.c **** /**************************************************************************************************
  45:../Common/Common.c **** * Function Name: convert_ascii_to_binary
  46:../Common/Common.c **** * Description  : .
  47:../Common/Common.c **** * Arguments    : None
  48:../Common/Common.c **** * Return Value : None
  49:../Common/Common.c **** ***************************************************************************************************
  50:../Common/Common.c **** uint8_t convert_ascii_to_binary(uint8_t ascii_high, uint8_t ascii_low)
  51:../Common/Common.c **** {
 277                             		.loc 1 51 0
  52:../Common/Common.c ****     if ((ascii_high >= '0') && ('9' >= ascii_high))
 278                             		.loc 1 52 0
 279 0000 88 04                   		mov	a, [sp+4]
 280 0002 4C 2F                   		cmp	a, #47
 281 0004 61 E3                   		 skh
 282 0006 EC 1E 00 00             		 br	!!.L11
 283                             		.loc 1 52 0 is_stmt 0 discriminator 1
 284 000a 88 04                   		mov	a, [sp+4]
 285 000c 4C 39                   		cmp	a, #57
 286 000e 61 F3                   		 sknh
 287 0010 EC 1E 00 00             		 br	!!.L11
  53:../Common/Common.c ****     {
  54:../Common/Common.c ****         ascii_high = (ascii_high - OFFSET_ASCII_NUMBER);
 288                             		.loc 1 54 0 is_stmt 1
 289 0014 88 04                   		mov	a, [sp+4]
 290 0016 0C D0                   		add	a, #-48
 291 0018 98 04                   		mov	[sp+4], a
 292 001a EC 56 00 00             		br	!!.L12
 293                             	.L11:
  55:../Common/Common.c ****     }
  56:../Common/Common.c ****     else if((ascii_high >= 'A') && ('F' >= ascii_high))
 294                             		.loc 1 56 0
 295 001e 88 04                   		mov	a, [sp+4]
 296 0020 4C 40                   		cmp	a, #64
 297 0022 61 E3                   		 skh
 298 0024 EC 3C 00 00             		 br	!!.L13
 299                             		.loc 1 56 0 is_stmt 0 discriminator 1
 300 0028 88 04                   		mov	a, [sp+4]
 301 002a 4C 46                   		cmp	a, #70
 302 002c 61 F3                   		 sknh
 303 002e EC 3C 00 00             		 br	!!.L13
  57:../Common/Common.c ****     {
  58:../Common/Common.c ****         ascii_high = (ascii_high - OFFSET_ASCII_HAX_LOWER);
 304                             		.loc 1 58 0 is_stmt 1
 305 0032 88 04                   		mov	a, [sp+4]
 306 0034 0C C9                   		add	a, #-55
 307 0036 98 04                   		mov	[sp+4], a
 308 0038 EC 56 00 00             		br	!!.L12
 309                             	.L13:
  59:../Common/Common.c ****     }
  60:../Common/Common.c ****     else if((ascii_high >= 'a') && ('f' >= ascii_high))
 310                             		.loc 1 60 0
 311 003c 88 04                   		mov	a, [sp+4]
 312 003e 4C 60                   		cmp	a, #96
 313 0040 61 E3                   		 skh
 314 0042 EC 56 00 00             		 br	!!.L12
 315                             		.loc 1 60 0 is_stmt 0 discriminator 1
 316 0046 88 04                   		mov	a, [sp+4]
 317 0048 4C 66                   		cmp	a, #102
 318 004a 61 F3                   		 sknh
 319 004c EC 56 00 00             		 br	!!.L12
  61:../Common/Common.c ****     {
  62:../Common/Common.c ****         ascii_high = (ascii_high - OFFSET_ASCII_HAX_UPPER);
 320                             		.loc 1 62 0 is_stmt 1
 321 0050 88 04                   		mov	a, [sp+4]
 322 0052 0C A9                   		add	a, #-87
 323 0054 98 04                   		mov	[sp+4], a
 324                             	.L12:
  63:../Common/Common.c ****     }
  64:../Common/Common.c ****     else
  65:../Common/Common.c ****     {
  66:../Common/Common.c ****         /* Do nothing */
  67:../Common/Common.c ****     }
  68:../Common/Common.c **** 
  69:../Common/Common.c ****     if ((ascii_low >= '0') && ('9' >= ascii_low))
 325                             		.loc 1 69 0
 326 0056 88 06                   		mov	a, [sp+6]
 327 0058 4C 2F                   		cmp	a, #47
 328 005a 61 E3                   		 skh
 329 005c EC 74 00 00             		 br	!!.L14
 330                             		.loc 1 69 0 is_stmt 0 discriminator 1
 331 0060 88 06                   		mov	a, [sp+6]
 332 0062 4C 39                   		cmp	a, #57
 333 0064 61 F3                   		 sknh
 334 0066 EC 74 00 00             		 br	!!.L14
  70:../Common/Common.c ****     {
  71:../Common/Common.c ****         ascii_low = (ascii_low - OFFSET_ASCII_NUMBER);
 335                             		.loc 1 71 0 is_stmt 1
 336 006a 88 06                   		mov	a, [sp+6]
 337 006c 0C D0                   		add	a, #-48
 338 006e 98 06                   		mov	[sp+6], a
 339 0070 EC AC 00 00             		br	!!.L15
 340                             	.L14:
  72:../Common/Common.c ****     }
  73:../Common/Common.c ****     else if((ascii_low >= 'A') && ('F' >= ascii_low))
 341                             		.loc 1 73 0
 342 0074 88 06                   		mov	a, [sp+6]
 343 0076 4C 40                   		cmp	a, #64
 344 0078 61 E3                   		 skh
 345 007a EC 92 00 00             		 br	!!.L16
 346                             		.loc 1 73 0 is_stmt 0 discriminator 1
 347 007e 88 06                   		mov	a, [sp+6]
 348 0080 4C 46                   		cmp	a, #70
 349 0082 61 F3                   		 sknh
 350 0084 EC 92 00 00             		 br	!!.L16
  74:../Common/Common.c ****     {
  75:../Common/Common.c ****         ascii_low = (ascii_low - OFFSET_ASCII_HAX_LOWER);
 351                             		.loc 1 75 0 is_stmt 1
 352 0088 88 06                   		mov	a, [sp+6]
 353 008a 0C C9                   		add	a, #-55
 354 008c 98 06                   		mov	[sp+6], a
 355 008e EC AC 00 00             		br	!!.L15
 356                             	.L16:
  76:../Common/Common.c ****     }
  77:../Common/Common.c ****     else if((ascii_low >= 'a') && ('f' >= ascii_low))
 357                             		.loc 1 77 0
 358 0092 88 06                   		mov	a, [sp+6]
 359 0094 4C 60                   		cmp	a, #96
 360 0096 61 E3                   		 skh
 361 0098 EC AC 00 00             		 br	!!.L15
 362                             		.loc 1 77 0 is_stmt 0 discriminator 1
 363 009c 88 06                   		mov	a, [sp+6]
 364 009e 4C 66                   		cmp	a, #102
 365 00a0 61 F3                   		 sknh
 366 00a2 EC AC 00 00             		 br	!!.L15
  78:../Common/Common.c ****     {
  79:../Common/Common.c ****         ascii_low = (ascii_low - OFFSET_ASCII_HAX_UPPER);
 367                             		.loc 1 79 0 is_stmt 1
 368 00a6 88 06                   		mov	a, [sp+6]
 369 00a8 0C A9                   		add	a, #-87
 370 00aa 98 06                   		mov	[sp+6], a
 371                             	.L15:
  80:../Common/Common.c ****     }
  81:../Common/Common.c ****     else
  82:../Common/Common.c ****     {
  83:../Common/Common.c ****         /* Do nothing */
  84:../Common/Common.c ****     }
  85:../Common/Common.c **** 
  86:../Common/Common.c ****     return JOIN_BYTE_DATA(ascii_high, ascii_low);
 372                             		.loc 1 86 0
 373 00ac 88 04                   		mov	a, [sp+4]
 374 00ae 31 8E                   		shrw	ax, 8
 375 00b0 BD F0                   		movw	r8, ax
 376 00b2 31 4D                   		shlw	ax, 4
 377 00b4 BD F0                   		movw	r8, ax
 378 00b6 8D F0                   		mov	a, r8
 379 00b8 9D F1                   		mov	r9, a
 380 00ba 88 06                   		mov	a, [sp+6]
 381 00bc 9D F0                   		mov	r8, a
 382 00be 8D F1                   		mov	a, r9
 383 00c0 6B F0                   		or	a, r8
 384 00c2 9D F0                   		mov	r8, a
  87:../Common/Common.c **** }
 385                             		.loc 1 87 0
 386 00c4 D7                      		ret
 387                             	.LFE3:
 389                             		.section	.text.convert_BCD_to_binary,"ax",@progbits
 390                             		.global	_convert_BCD_to_binary
 392                             	_convert_BCD_to_binary:
 393                             	.LFB4:
  88:../Common/Common.c **** 
  89:../Common/Common.c **** uint8_t convert_BCD_to_binary (uint8_t BCD_number)
  90:../Common/Common.c **** {
 394                             		.loc 1 90 0
  91:../Common/Common.c **** 	return (GET_HIGH_4BIT(BCD_number)*10 + GET_LOW_4BIT(BCD_number));
 395                             		.loc 1 91 0
 396 0000 88 04                   		mov	a, [sp+4]
 397 0002 31 4A                   		shr	a, 4
 398 0004 9D F0                   		mov	r8, a
 399 0006 61 01                   		add	a, a
 400 0008 9D F0                   		mov	r8, a
 401 000a 31 29                   		shl	a, 2
 402 000c 9D F1                   		mov	r9, a
 403 000e 72                      		mov	c, a
 404 000f 8D F0                   		mov	a, r8
 405 0011 61 0A                   		add	a, c
 406 0013 9D F1                   		mov	r9, a
 407 0015 88 04                   		mov	a, [sp+4]
 408 0017 5C 0F                   		and	a, #15
 409 0019 9D F0                   		mov	r8, a
 410 001b 72                      		mov	c, a
 411 001c 8D F1                   		mov	a, r9
 412 001e 61 0A                   		add	a, c
 413 0020 9D F0                   		mov	r8, a
  92:../Common/Common.c **** }
 414                             		.loc 1 92 0
 415 0022 D7                      		ret
 416                             	.LFE4:
 418                             		.section	.text.convert_binary_to_BCD,"ax",@progbits
 419                             		.global	_convert_binary_to_BCD
 421                             	_convert_binary_to_BCD:
 422                             	.LFB5:
  93:../Common/Common.c **** 
  94:../Common/Common.c **** uint8_t convert_binary_to_BCD (uint8_t binary)
  95:../Common/Common.c **** {
 423                             		.loc 1 95 0
 424                             		; start of function
 425                             		; locals: 2 bytes
 426                             		; uses ES register
 427 0000 20 02                   		subw	sp, #2
 428                             	.LCFI2:
  96:../Common/Common.c **** 	uint8_t tmp1, tmp2;
  97:../Common/Common.c **** 
  98:../Common/Common.c **** 	if (binary > 99) binary = 99;
 429                             		.loc 1 98 0
 430 0002 88 06                   		mov	a, [sp+6]
 431 0004 4C 63                   		cmp	a, #99
 432 0006 61 E3                   		 skh
 433 0008 EC 10 00 00             		 br	!!.L21
 434                             		.loc 1 98 0 is_stmt 0 discriminator 1
 435 000c 51 63                   		mov	a, #99
 436 000e 98 06                   		mov	[sp+6], a
 437                             	.L21:
  99:../Common/Common.c **** 	tmp1 = binary/10;
 438                             		.loc 1 99 0 is_stmt 1
 439 0010 88 06                   		mov	a, [sp+6]
 440 0012 9D F0                   		mov	r8, a
 441 0014 51 CD                   		mov	a, #-51
 442 0016 70                      		mov	x, a
 443 0017 8D F0                   		mov	a, r8
 444 0019 D6                      		mulu	x ;umulqihi3
 445 001a BD F0                   		movw	r8, ax
 446 001c 31 3A                   		shr	a, 3
 447 001e 9D F0                   		mov	r8, a
 448 0020 98 01                   		mov	[sp+1], a
 100:../Common/Common.c **** 	tmp2 = binary - tmp1*10;
 449                             		.loc 1 100 0
 450 0022 9D F0                   		mov	r8, a
 451 0024 61 01                   		add	a, a
 452 0026 9D F0                   		mov	r8, a
 453 0028 31 29                   		shl	a, 2
 454 002a 9D F1                   		mov	r9, a
 455 002c 72                      		mov	c, a
 456 002d 8D F0                   		mov	a, r8
 457 002f 61 0A                   		add	a, c
 458 0031 9D F0                   		mov	r8, a
 459 0033 72                      		mov	c, a
 460 0034 F1                      		clrb	a
 461 0035 61 2A                   		sub	a, c
 462 0037 9D F0                   		mov	r8, a
 463 0039 72                      		mov	c, a
 464 003a 88 06                   		mov	a, [sp+6]
 465 003c 61 0A                   		add	a, c
 466 003e 98 00                   		mov	[sp], a
 101:../Common/Common.c **** 
 102:../Common/Common.c **** 	return(JOIN_BYTE_DATA(tmp1,tmp2));
 467                             		.loc 1 102 0
 468 0040 88 01                   		mov	a, [sp+1]
 469 0042 31 8E                   		shrw	ax, 8
 470 0044 BD F0                   		movw	r8, ax
 471 0046 31 4D                   		shlw	ax, 4
 472 0048 BD F0                   		movw	r8, ax
 473 004a 8D F0                   		mov	a, r8
 474 004c 9D F1                   		mov	r9, a
 475 004e 88 00                   		mov	a, [sp]
 476 0050 9D F0                   		mov	r8, a
 477 0052 8D F1                   		mov	a, r9
 478 0054 6B F0                   		or	a, r8
 479 0056 9D F0                   		mov	r8, a
 103:../Common/Common.c **** }
 480                             		.loc 1 103 0
 481 0058 10 02                   		addw	sp, #2
 482 005a D7                      		ret
 483                             	.LFE5:
 563                             	.Letext0:
 564                             		.file 2 "E:\\AIoT\\Code\\Rogger\\DGC_A230_6_Rev_1_0_Software\\src/r_cg_macrodriver.h"
